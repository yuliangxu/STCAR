// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// IonS_CAVI_rho
List IonS_CAVI_rho(arma::mat& M, arma::vec& X, arma::mat& C, double lambda, List& basis, double rho, const arma::sp_mat& B, const arma::sp_mat& W, const arma::sp_mat& in_Sigma_inv, const arma::vec& in_D, CharacterVector method, List& init_paras, List& sigmasq_step_controls, const arma::vec& in_delta_rho, List& SGD_controls, double initial_sigma_sq, double initial_tau_mu_sq, double initial_sigma_alpha_sq, double initial_sigma_zeta_sq, double initial_sigma_eta_sq, int eta_freq, int max_iter, int mcmc_sample, int burnin, int thinning, int begin_f_alpha, int f_alpha_interval, double paras_diff_tol, int verbose, int save_profile, bool display_progress);
RcppExport SEXP _STCAR_IonS_CAVI_rho(SEXP MSEXP, SEXP XSEXP, SEXP CSEXP, SEXP lambdaSEXP, SEXP basisSEXP, SEXP rhoSEXP, SEXP BSEXP, SEXP WSEXP, SEXP in_Sigma_invSEXP, SEXP in_DSEXP, SEXP methodSEXP, SEXP init_parasSEXP, SEXP sigmasq_step_controlsSEXP, SEXP in_delta_rhoSEXP, SEXP SGD_controlsSEXP, SEXP initial_sigma_sqSEXP, SEXP initial_tau_mu_sqSEXP, SEXP initial_sigma_alpha_sqSEXP, SEXP initial_sigma_zeta_sqSEXP, SEXP initial_sigma_eta_sqSEXP, SEXP eta_freqSEXP, SEXP max_iterSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP begin_f_alphaSEXP, SEXP f_alpha_intervalSEXP, SEXP paras_diff_tolSEXP, SEXP verboseSEXP, SEXP save_profileSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< List& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type in_Sigma_inv(in_Sigma_invSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type in_D(in_DSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type method(methodSEXP);
    Rcpp::traits::input_parameter< List& >::type init_paras(init_parasSEXP);
    Rcpp::traits::input_parameter< List& >::type sigmasq_step_controls(sigmasq_step_controlsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type in_delta_rho(in_delta_rhoSEXP);
    Rcpp::traits::input_parameter< List& >::type SGD_controls(SGD_controlsSEXP);
    Rcpp::traits::input_parameter< double >::type initial_sigma_sq(initial_sigma_sqSEXP);
    Rcpp::traits::input_parameter< double >::type initial_tau_mu_sq(initial_tau_mu_sqSEXP);
    Rcpp::traits::input_parameter< double >::type initial_sigma_alpha_sq(initial_sigma_alpha_sqSEXP);
    Rcpp::traits::input_parameter< double >::type initial_sigma_zeta_sq(initial_sigma_zeta_sqSEXP);
    Rcpp::traits::input_parameter< double >::type initial_sigma_eta_sq(initial_sigma_eta_sqSEXP);
    Rcpp::traits::input_parameter< int >::type eta_freq(eta_freqSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< int >::type begin_f_alpha(begin_f_alphaSEXP);
    Rcpp::traits::input_parameter< int >::type f_alpha_interval(f_alpha_intervalSEXP);
    Rcpp::traits::input_parameter< double >::type paras_diff_tol(paras_diff_tolSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type save_profile(save_profileSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(IonS_CAVI_rho(M, X, C, lambda, basis, rho, B, W, in_Sigma_inv, in_D, method, init_paras, sigmasq_step_controls, in_delta_rho, SGD_controls, initial_sigma_sq, initial_tau_mu_sq, initial_sigma_alpha_sq, initial_sigma_zeta_sq, initial_sigma_eta_sq, eta_freq, max_iter, mcmc_sample, burnin, thinning, begin_f_alpha, f_alpha_interval, paras_diff_tol, verbose, save_profile, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// geweke_test
bool geweke_test(arma::vec& x, double p_thresh, double frac1, double frac2);
RcppExport SEXP _STCAR_geweke_test(SEXP xSEXP, SEXP p_threshSEXP, SEXP frac1SEXP, SEXP frac2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type p_thresh(p_threshSEXP);
    Rcpp::traits::input_parameter< double >::type frac1(frac1SEXP);
    Rcpp::traits::input_parameter< double >::type frac2(frac2SEXP);
    rcpp_result_gen = Rcpp::wrap(geweke_test(x, p_thresh, frac1, frac2));
    return rcpp_result_gen;
END_RCPP
}
// complement
arma::uvec complement(arma::uword start, arma::uword end, arma::uword n);
RcppExport SEXP _STCAR_complement(SEXP startSEXP, SEXP endSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type start(startSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type end(endSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(complement(start, end, n));
    return rcpp_result_gen;
END_RCPP
}
// High_to_low_vec
arma::vec High_to_low_vec(arma::vec& High_vec, int L, Rcpp::List& Phi_Q, Rcpp::List& region_idx, Rcpp::List& L_idx);
RcppExport SEXP _STCAR_High_to_low_vec(SEXP High_vecSEXP, SEXP LSEXP, SEXP Phi_QSEXP, SEXP region_idxSEXP, SEXP L_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type High_vec(High_vecSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type Phi_Q(Phi_QSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type region_idx(region_idxSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type L_idx(L_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(High_to_low_vec(High_vec, L, Phi_Q, region_idx, L_idx));
    return rcpp_result_gen;
END_RCPP
}
// High_to_low
arma::mat High_to_low(const arma::mat& High_mat, int L, Rcpp::List& Phi_Q, Rcpp::List& region_idx, Rcpp::List& L_idx);
RcppExport SEXP _STCAR_High_to_low(SEXP High_matSEXP, SEXP LSEXP, SEXP Phi_QSEXP, SEXP region_idxSEXP, SEXP L_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type High_mat(High_matSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type Phi_Q(Phi_QSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type region_idx(region_idxSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type L_idx(L_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(High_to_low(High_mat, L, Phi_Q, region_idx, L_idx));
    return rcpp_result_gen;
END_RCPP
}
// Low_to_high
arma::mat Low_to_high(arma::mat& Low_mat, int p, Rcpp::List& Phi_Q, Rcpp::List& region_idx, Rcpp::List& L_idx);
RcppExport SEXP _STCAR_Low_to_high(SEXP Low_matSEXP, SEXP pSEXP, SEXP Phi_QSEXP, SEXP region_idxSEXP, SEXP L_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Low_mat(Low_matSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type Phi_Q(Phi_QSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type region_idx(region_idxSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type L_idx(L_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(Low_to_high(Low_mat, p, Phi_Q, region_idx, L_idx));
    return rcpp_result_gen;
END_RCPP
}
// Low_to_high_vec
arma::colvec Low_to_high_vec(const arma::colvec& Low_vec, int p, const Rcpp::List& Phi_Q, const Rcpp::List& region_idx, const Rcpp::List& L_idx);
RcppExport SEXP _STCAR_Low_to_high_vec(SEXP Low_vecSEXP, SEXP pSEXP, SEXP Phi_QSEXP, SEXP region_idxSEXP, SEXP L_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type Low_vec(Low_vecSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Phi_Q(Phi_QSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type region_idx(region_idxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type L_idx(L_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(Low_to_high_vec(Low_vec, p, Phi_Q, region_idx, L_idx));
    return rcpp_result_gen;
END_RCPP
}
// sample_truncated_normal_vec
arma::vec sample_truncated_normal_vec(const arma::vec& mu, const arma::vec& sigma, double lambda, int delta);
RcppExport SEXP _STCAR_sample_truncated_normal_vec(SEXP muSEXP, SEXP sigmaSEXP, SEXP lambdaSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_truncated_normal_vec(mu, sigma, lambda, delta));
    return rcpp_result_gen;
END_RCPP
}
// truncated_normal_stats_vec
arma::mat truncated_normal_stats_vec(const arma::vec& mu, const arma::vec& sigma, double lambda, int delta, int output);
RcppExport SEXP _STCAR_truncated_normal_stats_vec(SEXP muSEXP, SEXP sigmaSEXP, SEXP lambdaSEXP, SEXP deltaSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(truncated_normal_stats_vec(mu, sigma, lambda, delta, output));
    return rcpp_result_gen;
END_RCPP
}
// SonI_CAVI_rho
List SonI_CAVI_rho(arma::vec& y, arma::mat& X, arma::mat& M, double lambda, double rho, const arma::sp_mat& B, const arma::sp_mat& W, const arma::sp_mat& in_Sigma_inv, const arma::vec& in_D, CharacterVector method, List& init_paras, List& SGD_controls, List& Geweke_controls, List& sigmasq_step_controls, const arma::vec& in_delta_rho, double initial_sigma_sq, double initial_sigma_beta_sq, double initial_sigma_gamma_sq, double initial_tau_mu_sq, int mcmc_sample, int burnin, int thinning, int max_iter, int begin_f_beta, int f_beta_interval, double paras_diff_tol, double SGD_step, int ELBO_stop, double ELBO_diff_tol, int verbose, int save_profile, bool trace_all_ELBO, bool include_Confounder, bool update_beta, bool update_gamma, bool update_delta_rho, bool display_progress);
RcppExport SEXP _STCAR_SonI_CAVI_rho(SEXP ySEXP, SEXP XSEXP, SEXP MSEXP, SEXP lambdaSEXP, SEXP rhoSEXP, SEXP BSEXP, SEXP WSEXP, SEXP in_Sigma_invSEXP, SEXP in_DSEXP, SEXP methodSEXP, SEXP init_parasSEXP, SEXP SGD_controlsSEXP, SEXP Geweke_controlsSEXP, SEXP sigmasq_step_controlsSEXP, SEXP in_delta_rhoSEXP, SEXP initial_sigma_sqSEXP, SEXP initial_sigma_beta_sqSEXP, SEXP initial_sigma_gamma_sqSEXP, SEXP initial_tau_mu_sqSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP max_iterSEXP, SEXP begin_f_betaSEXP, SEXP f_beta_intervalSEXP, SEXP paras_diff_tolSEXP, SEXP SGD_stepSEXP, SEXP ELBO_stopSEXP, SEXP ELBO_diff_tolSEXP, SEXP verboseSEXP, SEXP save_profileSEXP, SEXP trace_all_ELBOSEXP, SEXP include_ConfounderSEXP, SEXP update_betaSEXP, SEXP update_gammaSEXP, SEXP update_delta_rhoSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type in_Sigma_inv(in_Sigma_invSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type in_D(in_DSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type method(methodSEXP);
    Rcpp::traits::input_parameter< List& >::type init_paras(init_parasSEXP);
    Rcpp::traits::input_parameter< List& >::type SGD_controls(SGD_controlsSEXP);
    Rcpp::traits::input_parameter< List& >::type Geweke_controls(Geweke_controlsSEXP);
    Rcpp::traits::input_parameter< List& >::type sigmasq_step_controls(sigmasq_step_controlsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type in_delta_rho(in_delta_rhoSEXP);
    Rcpp::traits::input_parameter< double >::type initial_sigma_sq(initial_sigma_sqSEXP);
    Rcpp::traits::input_parameter< double >::type initial_sigma_beta_sq(initial_sigma_beta_sqSEXP);
    Rcpp::traits::input_parameter< double >::type initial_sigma_gamma_sq(initial_sigma_gamma_sqSEXP);
    Rcpp::traits::input_parameter< double >::type initial_tau_mu_sq(initial_tau_mu_sqSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type begin_f_beta(begin_f_betaSEXP);
    Rcpp::traits::input_parameter< int >::type f_beta_interval(f_beta_intervalSEXP);
    Rcpp::traits::input_parameter< double >::type paras_diff_tol(paras_diff_tolSEXP);
    Rcpp::traits::input_parameter< double >::type SGD_step(SGD_stepSEXP);
    Rcpp::traits::input_parameter< int >::type ELBO_stop(ELBO_stopSEXP);
    Rcpp::traits::input_parameter< double >::type ELBO_diff_tol(ELBO_diff_tolSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type save_profile(save_profileSEXP);
    Rcpp::traits::input_parameter< bool >::type trace_all_ELBO(trace_all_ELBOSEXP);
    Rcpp::traits::input_parameter< bool >::type include_Confounder(include_ConfounderSEXP);
    Rcpp::traits::input_parameter< bool >::type update_beta(update_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type update_gamma(update_gammaSEXP);
    Rcpp::traits::input_parameter< bool >::type update_delta_rho(update_delta_rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(SonI_CAVI_rho(y, X, M, lambda, rho, B, W, in_Sigma_inv, in_D, method, init_paras, SGD_controls, Geweke_controls, sigmasq_step_controls, in_delta_rho, initial_sigma_sq, initial_sigma_beta_sq, initial_sigma_gamma_sq, initial_tau_mu_sq, mcmc_sample, burnin, thinning, max_iter, begin_f_beta, f_beta_interval, paras_diff_tol, SGD_step, ELBO_stop, ELBO_diff_tol, verbose, save_profile, trace_all_ELBO, include_Confounder, update_beta, update_gamma, update_delta_rho, display_progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_STCAR_IonS_CAVI_rho", (DL_FUNC) &_STCAR_IonS_CAVI_rho, 31},
    {"_STCAR_geweke_test", (DL_FUNC) &_STCAR_geweke_test, 4},
    {"_STCAR_complement", (DL_FUNC) &_STCAR_complement, 3},
    {"_STCAR_High_to_low_vec", (DL_FUNC) &_STCAR_High_to_low_vec, 5},
    {"_STCAR_High_to_low", (DL_FUNC) &_STCAR_High_to_low, 5},
    {"_STCAR_Low_to_high", (DL_FUNC) &_STCAR_Low_to_high, 5},
    {"_STCAR_Low_to_high_vec", (DL_FUNC) &_STCAR_Low_to_high_vec, 5},
    {"_STCAR_sample_truncated_normal_vec", (DL_FUNC) &_STCAR_sample_truncated_normal_vec, 4},
    {"_STCAR_truncated_normal_stats_vec", (DL_FUNC) &_STCAR_truncated_normal_stats_vec, 5},
    {"_STCAR_SonI_CAVI_rho", (DL_FUNC) &_STCAR_SonI_CAVI_rho, 37},
    {NULL, NULL, 0}
};

RcppExport void R_init_STCAR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
